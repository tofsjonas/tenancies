{"version":3,"sources":["components/portfolio/EditTenancy.tsx","components/portfolio/TenancyItem.tsx"],"names":["EditTenancy","tenancy","is_mounted","useRef","t","useTranslation","dispatch","useContext","TenancyContext","useState","is_saving","setIsSaving","size","nbr_of_rooms","tenant_information","utilities","useForm","defaultValues","handleSubmit","register","formState","reset","useEffect","current","Form","onSubmit","form_data","console","log","updateTenancyInStorage","id","then","data","updated_tenancy","type","UPDATE_TENANCY","payload","catch","err","Group","controlId","isDirty","Label","Control","step","placeholder","defaultValue","as","rows","Button","variant","disabled","isValid","Spinner","animation","role","MyCrumb","styled","Breadcrumb","ItemContainer","Container","TheItem","item","url","y","x","process","is_deleting","setIsDeleting","navigate","useNavigate","Row","Col","tekst","lg","Image","crossOrigin","width","src","rounded","onClick","window","confirm","deleteTenancyFromStorage","DELETE_TENANCY","TenancyItem","useParams","tenancies","setItem","error","setError","filter","obj","Item","linkAs","Link","linkProps","to","active"],"mappings":"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","file":"static/js/6.4b1040fe.chunk.js","sourcesContent":["import React, { useState, useContext, useRef, useEffect } from 'react'\n// import Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Form from 'react-bootstrap/Form'\nimport { updateTenancyInStorage } from '../../lib/backend'\nimport { Tenancy } from '../../types/global'\nimport { UPDATE_TENANCY, TenancyContext } from '../../contexts/TenancyContext'\nimport { useForm } from 'react-hook-form'\n\nimport { useTranslation } from 'react-i18next'\n\ntype FormData = {\n  size: number\n  nbr_of_rooms: number\n  utilities: string\n  tenant_information: string\n}\n\ntype EditTenancyProps = {\n  tenancy: Tenancy\n}\n\nconst EditTenancy = ({ tenancy }: EditTenancyProps) => {\n  const is_mounted = useRef(false)\n  const { t } = useTranslation()\n  const { dispatch } = useContext(TenancyContext)\n  const [is_saving, setIsSaving] = useState(false)\n\n  const { size, nbr_of_rooms, tenant_information, utilities } = tenancy\n\n  const { handleSubmit, register, formState, reset } = useForm<FormData>({\n    defaultValues: { size, nbr_of_rooms, tenant_information, utilities },\n  })\n\n  useEffect(() => {\n    is_mounted.current = true\n    return () => {\n      is_mounted.current = false\n    }\n  }, [])\n\n  const onSubmit = (form_data: FormData) => {\n    console.log('FormData', form_data)\n    setIsSaving(true)\n\n    updateTenancyInStorage(tenancy.id, form_data)\n      .then((data) => {\n        reset(form_data) // so the form is no longer dirty\n        const updated_tenancy: Tenancy = { ...tenancy, ...data }\n        dispatch({\n          type: UPDATE_TENANCY,\n          payload: updated_tenancy,\n        })\n        if (is_mounted.current) {\n          setIsSaving(false)\n        }\n      })\n      .catch((err) => {\n        if (is_mounted.current) {\n          setIsSaving(false)\n        }\n        console.log(err)\n      })\n  }\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Form.Group controlId=\"formBasicSize\">\n        {formState.isDirty && 'APA'}\n        <Form.Label>{t('edit_tenancy_label_size')}</Form.Label>\n        <Form.Control\n          {...register('size')}\n          type=\"number\"\n          step=\"0.1\"\n          placeholder={t('edit_tenancy_label_size_placeholder')}\n        />\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicNbrOfRooms\">\n        <Form.Label>{t('edit_tenancy_label_nbr_of_rooms')}</Form.Label>\n        <Form.Control\n          {...register('nbr_of_rooms')}\n          defaultValue={tenancy && tenancy.nbr_of_rooms}\n          type=\"number\"\n          step=\"1\"\n          placeholder={t('edit_tenancy_label_nbr_of_rooms_placeholder')}\n        />\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicUtilities\">\n        <Form.Label>{t('edit_tenancy_label_utilities')}</Form.Label>\n        <Form.Control\n          {...register('utilities')}\n          defaultValue={tenancy && tenancy.utilities}\n          as=\"textarea\"\n          rows={3}\n          placeholder={t('edit_tenancy_label_utilities_placeholder')}\n        />\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicTenantInformation\">\n        <Form.Label>{t('edit_tenancy_label_tenant_information')}</Form.Label>\n        <Form.Control\n          {...register('tenant_information')}\n          defaultValue={tenancy && tenancy.tenant_information}\n          as=\"textarea\"\n          rows={3}\n          placeholder={t('edit_tenancy_label_tenant_information_placeholder')}\n        />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\" disabled={!formState.isDirty || !formState.isValid}>\n        {is_saving && (\n          <>\n            <Spinner animation=\"border\" role=\"status\" size=\"sm\"></Spinner> {t('edit_tenancy_save_button_is_saving')}\n          </>\n        )}\n        {!is_saving && t('edit_tenancy_save_button')}\n      </Button>\n    </Form>\n  )\n}\nexport default EditTenancy\n","import React, { useContext, useEffect, useState, useRef } from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport { TenancyContext, DELETE_TENANCY } from '../../contexts/TenancyContext'\nimport { Tenancy } from '../../types/global'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Breadcrumb from 'react-bootstrap/Breadcrumb'\nimport Spinner from 'react-bootstrap/Spinner'\nimport { XLg } from 'react-bootstrap-icons'\nimport { useTranslation } from 'react-i18next'\n\nimport Image from 'react-bootstrap/Image'\n\nimport EditTenancy from './EditTenancy'\nimport styled from '@emotion/styled'\nimport { deleteTenancyFromStorage } from '../../lib/backend'\n\nconst MyCrumb = styled(Breadcrumb)`\n  ol {\n    background-color: transparent;\n  }\n`\nconst ItemContainer = styled(Container)`\n  img {\n    max-width: 85vw;\n  }\n  margin-bottom: 40px;\n`\ntype TheItemProps = {\n  item: Tenancy\n}\n\nconst TheItem = ({ item }: TheItemProps) => {\n  const url =\n    process.env.NODE_ENV === 'production'\n      ? `https://maps.googleapis.com/maps/api/streetview?size=400x400&location=${item.y},${item.x}&fov=70&pitch=0&key=${process.env.REACT_APP_GOOGLE_API_KEY}`\n      : `https://via.placeholder.com/500`\n  const { t } = useTranslation()\n\n  const [is_deleting, setIsDeleting] = useState(false)\n\n  const { dispatch } = useContext(TenancyContext)\n  const navigate = useNavigate()\n\n  const is_mounted = useRef(false)\n\n  useEffect(() => {\n    is_mounted.current = true\n    return () => {\n      is_mounted.current = false\n    }\n  }, [])\n\n  /**\n   * @todo make it purdier than window.confirm\n   */\n  const handleDeleteClick = () => {\n    setIsDeleting(true)\n    if (window.confirm('Are you sure?')) {\n      deleteTenancyFromStorage(item.id)\n        .then(() => {\n          dispatch({\n            type: DELETE_TENANCY,\n            payload: item.id,\n          })\n          navigate('tenancies')\n          if (is_mounted.current) {\n            setIsDeleting(false)\n          }\n        })\n        .catch((err) => {\n          setIsDeleting(false)\n          console.log(err)\n        })\n    } else {\n      setIsDeleting(false)\n    }\n  }\n\n  return (\n    <ItemContainer>\n      <Row>\n        <Col>\n          <h1>{item.tekst}</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col lg>\n          <Image\n            crossOrigin={process.env.NODE_ENV === 'production' ? 'anonymous' : undefined}\n            width=\"500\"\n            src={url}\n            rounded\n          />\n        </Col>\n        <Col lg>\n          <EditTenancy tenancy={item} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <br />\n          <Button variant=\"danger\" onClick={handleDeleteClick}>\n            {is_deleting && (\n              <>\n                <Spinner animation=\"border\" role=\"status\" size=\"sm\"></Spinner>{' '}\n                {t('edit_tenancy_delete_button_is_deleting')}\n              </>\n            )}\n            {!is_deleting && (\n              <>\n                <XLg /> {t('edit_tenancy_delete_button')}\n              </>\n            )}\n          </Button>\n        </Col>\n      </Row>\n    </ItemContainer>\n  )\n}\n\nconst TenancyItem = () => {\n  const { id } = useParams()\n  const { t } = useTranslation()\n  const { tenancies } = useContext(TenancyContext)\n\n  const [item, setItem] = useState<Tenancy | null>(null)\n  const [error, setError] = useState('')\n\n  useEffect(() => {\n    const item = tenancies.filter((obj) => obj.id === id)[0]\n    if (item) {\n      setError('')\n      setItem(item)\n    } else {\n      setItem(null)\n      setError('Item not found :(')\n    }\n  }, [tenancies, id])\n\n  return (\n    <>\n      <MyCrumb>\n        <Breadcrumb.Item linkAs={Link} linkProps={{ to: '/' }}>\n          {t('tenancy_item_breadcrumb_back_to_list')}\n        </Breadcrumb.Item>\n        <Breadcrumb.Item active>\n          {error && 'ERROR'}\n          {item && item.tekst}\n        </Breadcrumb.Item>\n      </MyCrumb>\n      {error && (\n        <Container>\n          <Row>\n            <Col>{error}</Col>\n          </Row>\n        </Container>\n      )}\n      {item && <TheItem item={item} />}\n    </>\n  )\n}\nexport default TenancyItem\n"],"sourceRoot":""}