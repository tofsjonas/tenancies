{"version":3,"sources":["components/TenancyList.tsx","i18n/config.ts","components/LanguageToggler.tsx","components/OverView.tsx","App.tsx","reportWebVitals.ts","index.tsx","contexts/TenancyContext.tsx","lib/backend.ts"],"names":["TenancyList","tenancies","items_per_page","parseInt","process","dispatch","useContext","TenancyContext","useState","items","setItems","page_count","setPageCount","current_page_index","setCurrentPageIndex","useEffect","start","end","slice","count","Math","ceil","length","className","map","tenancy","Row","Col","tekst","md","Button","variant","onClick","id","adgangsadresse","window","confirm","deleteTenancyFromStorage","then","type","DELETE_TENANCY","payload","catch","err","console","log","Pagination","number","push","Item","active","getItems","supported_i18n_languages","initial_language","localStorage","getItem","indexOf","i18n","use","initReactI18next","init","fallbackLng","lng","resources","en","translations","require","sv","ns","defaultNS","languages","LanguageToggler","useTranslation","changeLanguage","e","value","target","setItem","lang","language","AddTenancy","lazy","FabButton","styled","OverView","t","loading","setLoading","filter","setFilter","filtered_list","setFilteredList","show_add_modal","setShowAddModal","is_mounted","useRef","current","getTenanciesFromStorage","data","SET_TENANCIES","list","obj","RegExp","test","Navbar","bg","expand","Brand","Form","inline","FormControl","placeholder","onChange","Container","Spinner","animation","role","fallback","hideModal","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","ADD_TENANCY","initialState","reducer","state","action","createContext","TenancyProvider","children","useReducer","Provider","getAddressInfoFromDAWA","query","success","fail","axios","get","escape","response","status","a","Promise","resolve","reject","tenancies_as_json_string","parsed_json","JSON","parse","setTimeout","error","Error","addTenancyToStorage","stringify","new_tenancies"],"mappings":"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","file":"static/js/main.05d16195.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\nimport { Tenancy } from '../types/global'\nimport { deleteTenancyFromStorage } from '../lib/backend'\nimport { TenancyContext, DELETE_TENANCY } from '../contexts/TenancyContext'\nimport Pagination from 'react-bootstrap/Pagination'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport { XLg } from 'react-bootstrap-icons'\n\ntype TenancyListProps = {\n  tenancies: Tenancy[]\n}\n\nconst TenancyList = ({ tenancies }: TenancyListProps) => {\n  const items_per_page = parseInt(process.env.REACT_APP_NUMBER_OF_ITEMS_IN_TENANCY_LIST || '10')\n  const { dispatch } = useContext(TenancyContext)\n  const [items, setItems] = useState<Tenancy[]>()\n  const [page_count, setPageCount] = useState(1)\n  const [current_page_index, setCurrentPageIndex] = useState(1)\n\n  const handleClick = (index: number) => {\n    setCurrentPageIndex(index)\n  }\n\n  useEffect(() => {\n    if (current_page_index > 1 && current_page_index > page_count) {\n      setCurrentPageIndex(current_page_index - 1)\n    }\n  }, [current_page_index, page_count])\n\n  useEffect(() => {\n    const start = (current_page_index - 1) * items_per_page\n    const end = current_page_index * items_per_page\n    setItems(tenancies.slice(start, end))\n  }, [current_page_index, tenancies, items_per_page])\n\n  useEffect(() => {\n    const count = Math.ceil(tenancies.length / items_per_page)\n    if (count > 0) {\n      setPageCount(count)\n    }\n  }, [tenancies, items_per_page])\n\n  /**\n   * @todo make it purdier than window.confirm\n   */\n  const handleDeleteClick = (id: string) => {\n    if (window.confirm('Are you sure?')) {\n      deleteTenancyFromStorage(id)\n        .then(() => {\n          dispatch({\n            type: DELETE_TENANCY,\n            payload: id,\n          })\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }\n  }\n\n  const getItems = () => {\n    const items = []\n    for (let number = 1; number <= page_count; number++) {\n      items.push(\n        <Pagination.Item\n          key={number}\n          active={number === current_page_index}\n          onClick={() => {\n            handleClick(number)\n          }}\n        >\n          {number}\n        </Pagination.Item>,\n      )\n    }\n    return items\n  }\n\n  return (\n    <div className=\"TenancyList\">\n      {items && items.length > 0 && (\n        <>\n          {items.map((tenancy) => (\n            <Row className=\"mt-1 align-items-center\" key={tenancy.tekst}>\n              <Col>{tenancy.tekst}</Col>\n              <Col md=\"auto\">\n                <Button\n                  variant=\"danger\"\n                  onClick={() => {\n                    handleDeleteClick(tenancy.adgangsadresse.id)\n                  }}\n                >\n                  <XLg />\n                </Button>\n              </Col>\n            </Row>\n          ))}\n          {page_count > 1 && (\n            <>\n              <br />\n              <Pagination>{getItems()}</Pagination>\n            </>\n          )}\n        </>\n      )}\n      {items && items.length === 0 && (\n        <Row className=\"mt-1 align-items-center\">\n          <Col>\n            <br />\n            Search result empty :(\n          </Col>\n        </Row>\n      )}\n    </div>\n  )\n}\nexport default TenancyList\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\n\nexport const supported_i18n_languages = ['en', 'sv']\n\nlet initial_language = localStorage.getItem('language') || 'en'\n\nif (supported_i18n_languages.indexOf(initial_language) === -1) {\n  initial_language = 'en'\n}\n\ni18n.use(initReactI18next).init({\n  fallbackLng: 'en',\n  lng: initial_language,\n  resources: {\n    en: {\n      translations: require('./locales/en/translations.json'),\n    },\n    sv: {\n      translations: require('./locales/sv/translations.json'),\n    },\n  },\n  ns: ['translations'],\n  defaultNS: 'translations',\n})\n\ni18n.languages = ['en', 'sv']\n\nexport default i18n\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Button from 'react-bootstrap/Button'\nimport { supported_i18n_languages } from '../i18n/config'\n\nconst LanguageToggler = () => {\n  const { i18n } = useTranslation()\n\n  const changeLanguage = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const value = (e.target as HTMLInputElement).value\n    localStorage.setItem('language', value)\n    // console.log(i18n.languages) changes between clicks, no idea why...\n    i18n.changeLanguage(value)\n  }\n\n  return (\n    <div className=\"LanguageToggler\">\n      {supported_i18n_languages.map((lang) => (\n        <Button variant={lang === i18n.language ? 'dark' : 'light'} key={lang} onClick={changeLanguage} value={lang}>\n          {lang}\n        </Button>\n      ))}\n    </div>\n  )\n}\nexport default LanguageToggler\n","import React, { useState, useEffect, lazy, Suspense, useRef, useContext } from 'react'\nimport { Tenancy } from '../types/global'\nimport styled from '@emotion/styled'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Spinner from 'react-bootstrap/Spinner'\nimport { useTranslation } from 'react-i18next'\n\nimport { PlusLg } from 'react-bootstrap-icons'\nimport { getTenanciesFromStorage } from '../lib/backend'\nimport { TenancyContext, SET_TENANCIES } from '../contexts/TenancyContext'\nimport TenancyList from './TenancyList'\nimport LanguageToggler from './LanguageToggler'\n\nconst AddTenancy = lazy(() => import('./AddTenancy'))\n\nconst FabButton = styled(Button)`\n  width: 50px;\n  height: 50px;\n  border-radius: 50px;\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n`\n\nconst OverView = () => {\n  const { t } = useTranslation()\n\n  const { tenancies, dispatch } = useContext(TenancyContext)\n  const [loading, setLoading] = useState(true)\n  const [filter, setFilter] = useState('')\n  const [filtered_list, setFilteredList] = useState<Tenancy[]>([])\n\n  const [show_add_modal, setShowAddModal] = useState(false)\n  const is_mounted = useRef(false)\n\n  useEffect(() => {\n    is_mounted.current = true\n    getTenanciesFromStorage()\n      .then((data) => {\n        if (is_mounted.current) {\n          dispatch({\n            type: SET_TENANCIES,\n            payload: data,\n          })\n          setLoading(false)\n        }\n      })\n      .catch((err) => {\n        setLoading(false)\n        console.log(err)\n      })\n\n    return () => {\n      is_mounted.current = false\n    }\n  }, [dispatch])\n\n  useEffect(() => {\n    const list = tenancies.filter((obj) => new RegExp(filter, 'i').test(obj.tekst))\n    setFilteredList(list)\n  }, [tenancies, filter])\n\n  const handleCloseAddModal = () => {\n    setShowAddModal(false)\n  }\n\n  const handleAddClick = () => {\n    setShowAddModal(true)\n  }\n\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.target.value)\n  }\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand className=\"mr-auto\">{t('overview_navbar_brand')}</Navbar.Brand>\n        <LanguageToggler />\n        <Form inline>\n          <FormControl\n            type=\"search\"\n            placeholder={t('overview_navbar_placeholder_search')}\n            value={filter}\n            onChange={handleFilterChange}\n            className=\"mr-sm-2\"\n          />\n        </Form>\n      </Navbar>\n      <Container>\n        {loading && (\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        )}\n        {!loading && tenancies && tenancies.length === 0 && (\n          <Row>\n            <Col>{t('overview_you_have_no_tenancies')}</Col>\n          </Row>\n        )}\n        {!loading && tenancies && tenancies.length > 0 && <TenancyList tenancies={filtered_list} />}\n      </Container>\n      <FabButton onClick={handleAddClick}>\n        <PlusLg />\n      </FabButton>\n      <Suspense fallback=\"loading...\">{show_add_modal && <AddTenancy hideModal={handleCloseAddModal} />}</Suspense>\n    </>\n  )\n}\nexport default OverView\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport OverView from './components/OverView'\nimport TenancyProvider from './contexts/TenancyContext'\n\nfunction App() {\n  return (\n    <TenancyProvider>\n      <Container>\n        <Row>\n          <Col>\n            <OverView />\n          </Col>\n        </Row>\n      </Container>\n    </TenancyProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport './i18n/config'\n\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import React, { createContext, useReducer } from 'react'\nimport { Tenancy } from '../types/global'\n\nexport const SET_TENANCIES = 'SET_TENANCIES'\nexport const ADD_TENANCY = 'ADD_TENANCY'\nexport const DELETE_TENANCY = 'DELETE_TENANCY'\n\ntype State = {\n  tenancies: Tenancy[]\n}\n\ntype Action =\n  | { type: 'SET_TENANCIES'; payload: Tenancy[] }\n  | { type: 'ADD_TENANCY'; payload: Tenancy }\n  | { type: 'DELETE_TENANCY'; payload: string }\n\nconst initialState: State = {\n  tenancies: [],\n}\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case SET_TENANCIES:\n      return { ...state, tenancies: action.payload }\n    case ADD_TENANCY:\n      return { ...state, tenancies: [...state.tenancies, action.payload] }\n    case DELETE_TENANCY:\n      return { ...state, tenancies: state.tenancies.filter((obj) => obj.adgangsadresse.id !== action.payload) }\n    default:\n      return state\n  }\n}\n\nexport type ContextType = State & {\n  dispatch: React.Dispatch<Action>\n}\n\nexport const TenancyContext = createContext<ContextType>({\n  ...initialState,\n  dispatch: () => null,\n})\n\nconst TenancyProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  return <TenancyContext.Provider value={{ ...state, dispatch }}>{children}</TenancyContext.Provider>\n}\nexport default TenancyProvider\n","import axios from 'axios'\nimport { Tenancy } from '../types/global'\n\ntype AddressParams = {\n  query: string\n  success: (data: Tenancy[]) => void\n  fail: (err: Error) => void\n}\n\nexport const getAddressInfoFromDAWA = ({ query, success, fail }: AddressParams): void => {\n  const remote_url = process.env.REACT_APP_DAWA_URL\n  axios\n    .get(remote_url + escape(query))\n    .then((response) => {\n      if (response.status === 200) {\n        success(response.data)\n      }\n    })\n    .catch((err) => {\n      fail(err)\n    })\n}\n\nexport const getTenanciesFromStorage = async () => {\n  return new Promise<Tenancy[]>((resolve, reject) => {\n    const tenancies_as_json_string = localStorage.getItem('tenancies') || '[]'\n    try {\n      const parsed_json = JSON.parse(tenancies_as_json_string)\n      // to fake load time\n      setTimeout(() => {\n        resolve(parsed_json)\n      }, 200)\n    } catch (error) {\n      localStorage.setItem('tenancies', '')\n      reject(new Error('Data corrupt, resetting!'))\n    }\n  })\n}\n\n/**\n * @todo ensure unique addresses\n */\n\nexport const addTenancyToStorage = async (obj: Tenancy) => {\n  return new Promise<Tenancy>((resolve, reject) => {\n    const tenancies_as_json_string = localStorage.getItem('tenancies') || '[]'\n    try {\n      const tenancies = JSON.parse(tenancies_as_json_string)\n      tenancies.push(obj)\n      localStorage.setItem('tenancies', JSON.stringify(tenancies))\n      // to fake load time\n      setTimeout(() => {\n        resolve(obj)\n      }, 600)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\nexport const deleteTenancyFromStorage = async (id: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const tenancies_as_json_string = localStorage.getItem('tenancies') || '[]'\n    try {\n      const tenancies = JSON.parse(tenancies_as_json_string)\n      const new_tenancies = tenancies.filter((obj: Tenancy) => obj.adgangsadresse.id !== id)\n      localStorage.setItem('tenancies', JSON.stringify(new_tenancies))\n      // to fake load time\n      setTimeout(() => {\n        resolve()\n      }, 200)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n"],"sourceRoot":""}