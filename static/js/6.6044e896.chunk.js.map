{"version":3,"sources":["components/portfolio/AddTenancy.tsx","lib/dawa.ts"],"names":["AddTenancy","hideModal","user","useContext","AuthContext","t","useTranslation","success","useAlert","dispatch","TenancyContext","navigate","useNavigate","is_mounted","useRef","useState","is_loading","setIsLoading","is_saving","setIsSaving","picked_tenancy","setPickedTenancy","options","setOptions","useEffect","current","Modal","show","onHide","Form","onSubmit","event","preventDefault","stopPropagation","new_tenancy","tekst","adgangsadresse","addTenancyToStorage","then","obj","type","ADD_TENANCY","payload","id","catch","err","console","log","message","Header","closeButton","Title","Body","filterBy","isLoading","labelKey","minLength","onSearch","query","fail","axios","get","process","escape","response","status","data","getAddressInfoFromDAWA","onChange","pick","placeholder","renderMenuItemChildren","option","Footer","Button","variant","onClick","disabled","Spinner","animation","role","size","className"],"mappings":"+PA4IeA,UAtHI,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UACZC,EAASC,qBAAWC,KAApBF,KACAG,EAAMC,cAAND,EACAE,EAAYC,cAAZD,QACAE,EAAaN,qBAAWO,KAAxBD,SACFE,EAAWC,cACXC,EAAaC,kBAAO,GAC1B,EAAmCC,oBAAS,GAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAiCF,oBAAS,GAA1C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA2CJ,qBAA3C,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAA8BN,mBAAwB,IAAtD,mBAAOO,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WAER,OADAX,EAAWY,SAAU,EACd,WACLZ,EAAWY,SAAU,KAEtB,IAwDH,OACE,cAACC,EAAA,EAAD,CAAOC,MAAM,EAAMC,OAAQ3B,EAA3B,SACE,eAAC4B,EAAA,EAAD,CAAMC,SArCW,SAACC,GAGpB,GAFAA,EAAMC,iBACND,EAAME,kBACFb,EAAgB,CAClBD,GAAY,GAEZ,IAAMe,EAAW,aACfC,MAAOf,EAAee,OACnBf,EAAegB,gBAGpBC,YAAoBH,EAAahC,GAC9BoC,MAAK,SAACC,GACD1B,EAAWY,UACbhB,EAAS,CACP+B,KAAMC,IACNC,QAASH,IAEXhC,EAAQF,EAAE,6BACVc,GAAY,GACZlB,IACAU,EAAS,WAAD,OAAYuB,EAAYS,SAGnCC,OAAM,SAACC,GACFhC,EAAWY,SACbN,GAAY,GAEd2B,QAAQC,IAAR,uBAA4BF,EAAIG,eASpC,UACE,cAACtB,EAAA,EAAMuB,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACxB,EAAA,EAAMyB,MAAP,UAAc9C,EAAE,+BAElB,eAACqB,EAAA,EAAM0B,KAAP,WACG/C,EAAE,qCACH,cAAC,IAAD,CACEgD,SAXO,kBAAM,GAYbV,GAAG,kBACHW,UAAWtC,EACXuC,SAAS,QACTC,UAAW,EACXC,SApEe,SAACC,GACxBzC,GAAa,GCjCqB,SAAC,GAAmD,IAAjDyC,EAAgD,EAAhDA,MAAOnD,EAAyC,EAAzCA,QAASoD,EAAgC,EAAhCA,KAEvDC,IACGC,IAFgBC,iEAECC,OAAOL,IACxBpB,MAAK,SAAC0B,GACmB,MAApBA,EAASC,QACX1D,EAAQyD,EAASE,SAGpBtB,OAAM,SAACC,GACNc,EAAKd,MDwBPsB,CAAuB,CACrBT,QACAnD,QAAS,SAAC2D,GACR3C,EAAW2C,GACXjD,GAAa,IAEf0C,KAAM,SAACd,GACL5B,GAAa,GACb6B,QAAQC,IAAIF,EAAIG,aA2DZoB,SAtDgB,SAACC,GACzBhD,EAAiBgD,EAAK,KAsDd/C,QAASA,EACTgD,YAAajE,EAAE,iCACfkE,uBAAwB,SAACC,GAAD,OAAyB,+BAAOA,EAAOrC,cAGnE,eAACT,EAAA,EAAM+C,OAAP,WACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS3E,EAArC,SACGI,EAAE,+BAEL,eAACqE,EAAA,EAAD,CACEC,QAASvD,EAAiB,UAAY,YACtCoB,KAAK,SACLqC,UAAWzD,GAAkBF,EAH/B,UAKGA,GACC,qCACE,cAAC4D,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAASC,KAAK,KAA/C,SACE,sBAAMC,UAAU,UAAhB,0BACS,IACV7E,EAAE,yCAGLa,GAAab,EAAE","file":"static/js/6.6044e896.chunk.js","sourcesContent":["import React, { useState, useContext, useRef, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useAlert } from 'react-bootstrap-hooks-alert'\n\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Form from 'react-bootstrap/Form'\nimport { addTenancyToStorage } from 'lib/storage'\nimport { getAddressInfoFromDAWA } from 'lib/dawa'\n\nimport { DAWATenancy, Tenancy } from '../../types/global'\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead'\nimport { ADD_TENANCY, TenancyContext } from '../../contexts/TenancyContext'\n\nimport { useTranslation } from 'react-i18next'\nimport { AuthContext } from 'contexts/AuthContext'\n\ntype AddTenancyProps = {\n  hideModal: () => void\n}\n\nconst AddTenancy = ({ hideModal }: AddTenancyProps) => {\n  const { user } = useContext(AuthContext)\n  const { t } = useTranslation()\n  const { success } = useAlert()\n  const { dispatch } = useContext(TenancyContext)\n  const navigate = useNavigate()\n  const is_mounted = useRef(false)\n  const [is_loading, setIsLoading] = useState(false)\n  const [is_saving, setIsSaving] = useState(false)\n  const [picked_tenancy, setPickedTenancy] = useState<DAWATenancy>()\n  const [options, setOptions] = useState<DAWATenancy[]>([])\n\n  useEffect(() => {\n    is_mounted.current = true\n    return () => {\n      is_mounted.current = false\n    }\n  }, [])\n\n  const handleDAWASearch = (query: string) => {\n    setIsLoading(true)\n    getAddressInfoFromDAWA({\n      query,\n      success: (data) => {\n        setOptions(data)\n        setIsLoading(false)\n      },\n      fail: (err) => {\n        setIsLoading(false)\n        console.log(err.message)\n      },\n    })\n  }\n\n  const handleTenancyPick = (pick: DAWATenancy[]) => {\n    setPickedTenancy(pick[0])\n  }\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    event.stopPropagation()\n    if (picked_tenancy) {\n      setIsSaving(true)\n\n      const new_tenancy = {\n        tekst: picked_tenancy.tekst,\n        ...picked_tenancy.adgangsadresse,\n      }\n\n      addTenancyToStorage(new_tenancy, user)\n        .then((obj) => {\n          if (is_mounted.current) {\n            dispatch({\n              type: ADD_TENANCY,\n              payload: obj as Tenancy,\n            })\n            success(t('add_tenancy_confirmation'))\n            setIsSaving(false)\n            hideModal()\n            navigate(`tenancy/${new_tenancy.id}`)\n          }\n        })\n        .catch((err) => {\n          if (is_mounted.current) {\n            setIsSaving(false)\n          }\n          console.log(`ADD FAILED:\\n${err.message}`)\n        })\n    }\n  }\n\n  const filterBy = () => true\n\n  return (\n    <Modal show={true} onHide={hideModal}>\n      <Form onSubmit={handleSubmit}>\n        <Modal.Header closeButton>\n          <Modal.Title>{t('add_tenancy_modal_title')}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {t('add_tenancy_start_typing_to_fetch')}\n          <AsyncTypeahead\n            filterBy={filterBy}\n            id=\"async-tenancies\"\n            isLoading={is_loading}\n            labelKey=\"tekst\"\n            minLength={3}\n            onSearch={handleDAWASearch}\n            onChange={handleTenancyPick}\n            options={options}\n            placeholder={t('add_tenancy_fetch_placeholder')}\n            renderMenuItemChildren={(option: DAWATenancy) => <span>{option.tekst}</span>}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={hideModal}>\n            {t('add_tenancy_cancel_button')}\n          </Button>\n          <Button\n            variant={picked_tenancy ? 'primary' : 'secondary'}\n            type=\"submit\"\n            disabled={!picked_tenancy || is_saving}\n          >\n            {is_saving && (\n              <>\n                <Spinner animation=\"border\" role=\"status\" size=\"sm\">\n                  <span className=\"sr-only\">Loading...</span>\n                </Spinner>{' '}\n                {t('add_tenancy_save_button_is_saving')}\n              </>\n            )}\n            {!is_saving && t('add_tenancy_save_button')}\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  )\n}\nexport default AddTenancy\n","import axios from 'axios'\nimport { DAWATenancy } from '../types/global'\n\ntype AddressParams = {\n  query: string\n  success: (data: DAWATenancy[]) => void\n  fail: (err: Error) => void\n}\n\nexport const getAddressInfoFromDAWA = ({ query, success, fail }: AddressParams): void => {\n  const remote_url = process.env.REACT_APP_DAWA_URL\n  axios\n    .get(remote_url + escape(query))\n    .then((response) => {\n      if (response.status === 200) {\n        success(response.data)\n      }\n    })\n    .catch((err) => {\n      fail(err)\n    })\n}\n"],"sourceRoot":""}