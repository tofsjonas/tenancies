{"version":3,"sources":["contexts/TenancyContext.tsx","lib/backend.ts","components/TenancyList.tsx","components/OverView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SET_TENANCIES","ADD_TENANCY","DELETE_TENANCY","initialState","tenancies","reducer","state","action","type","payload","filter","obj","adgangsadresse","id","TenancyContext","createContext","dispatch","TenancyProvider","children","useReducer","Provider","value","getAddressInfoFromDAWA","query","success","fail","axios","get","process","escape","then","response","status","data","catch","err","getTenanciesFromStorage","a","Promise","resolve","reject","tenancies_as_json_string","localStorage","getItem","parsed_json","JSON","parse","setTimeout","error","setItem","Error","addTenancyToStorage","push","stringify","deleteTenancyFromStorage","new_tenancies","TenancyList","items_per_page","parseInt","useContext","useState","items","setItems","page_count","setPageCount","current_page_index","setCurrentPageIndex","useEffect","start","end","slice","count","Math","ceil","length","className","map","tenancy","Row","Col","tekst","md","Button","variant","onClick","window","confirm","console","log","Pagination","number","Item","active","getItems","AddTenancy","lazy","FabButton","styled","OverView","loading","setLoading","show_add_modal","setShowAddModal","is_mounted","useRef","current","Navbar","bg","expand","Brand","Container","fluid","Spinner","animation","role","fallback","hideModal","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.398ac3c2.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react'\nimport { Tenancy } from '../types/global'\n\nexport const SET_TENANCIES = 'SET_TENANCIES'\nexport const ADD_TENANCY = 'ADD_TENANCY'\nexport const DELETE_TENANCY = 'DELETE_TENANCY'\n\ntype State = {\n  tenancies: Tenancy[]\n}\n\ntype Action =\n  | { type: 'SET_TENANCIES'; payload: Tenancy[] }\n  | { type: 'ADD_TENANCY'; payload: Tenancy }\n  | { type: 'DELETE_TENANCY'; payload: string }\n\nconst initialState: State = {\n  tenancies: [],\n}\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case SET_TENANCIES:\n      return { ...state, tenancies: action.payload }\n    case ADD_TENANCY:\n      return { ...state, tenancies: [...state.tenancies, action.payload] }\n    case DELETE_TENANCY:\n      return { ...state, tenancies: state.tenancies.filter((obj) => obj.adgangsadresse.id !== action.payload) }\n    default:\n      return state\n  }\n}\n\nexport type ContextType = State & {\n  dispatch: React.Dispatch<Action>\n}\n\nexport const TenancyContext = createContext<ContextType>({\n  ...initialState,\n  dispatch: () => null,\n})\n\nconst TenancyProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  return <TenancyContext.Provider value={{ ...state, dispatch }}>{children}</TenancyContext.Provider>\n}\nexport default TenancyProvider\n","import axios from 'axios'\nimport { Tenancy } from '../types/global'\n\ntype AddressParams = {\n  query: string\n  success: (data: Tenancy[]) => void\n  fail: (err: Error) => void\n}\n\nexport const getAddressInfoFromDAWA = ({ query, success, fail }: AddressParams): void => {\n  const remote_url = process.env.REACT_APP_DAWA_URL\n  axios\n    .get(remote_url + escape(query))\n    .then((response) => {\n      if (response.status === 200) {\n        success(response.data)\n      }\n    })\n    .catch((err) => {\n      fail(err)\n    })\n}\n\nexport const getTenanciesFromStorage = async () => {\n  return new Promise<Tenancy[]>((resolve, reject) => {\n    const tenancies_as_json_string = localStorage.getItem('tenancies') || '[]'\n    try {\n      const parsed_json = JSON.parse(tenancies_as_json_string)\n      // to fake load time\n      setTimeout(() => {\n        resolve(parsed_json)\n      }, 200)\n    } catch (error) {\n      localStorage.setItem('tenancies', '')\n      reject(new Error('Data corrupt, resetting!'))\n    }\n  })\n}\n\n/**\n * @todo ensure unique addresses\n */\n\nexport const addTenancyToStorage = async (obj: Tenancy) => {\n  return new Promise<Tenancy>((resolve, reject) => {\n    const tenancies_as_json_string = localStorage.getItem('tenancies') || '[]'\n    try {\n      const tenancies = JSON.parse(tenancies_as_json_string)\n      tenancies.push(obj)\n      localStorage.setItem('tenancies', JSON.stringify(tenancies))\n      // to fake load time\n      setTimeout(() => {\n        resolve(obj)\n      }, 600)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\nexport const deleteTenancyFromStorage = async (id: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const tenancies_as_json_string = localStorage.getItem('tenancies') || '[]'\n    try {\n      const tenancies = JSON.parse(tenancies_as_json_string)\n      const new_tenancies = tenancies.filter((obj: Tenancy) => obj.adgangsadresse.id !== id)\n      localStorage.setItem('tenancies', JSON.stringify(new_tenancies))\n      // to fake load time\n      setTimeout(() => {\n        resolve()\n      }, 200)\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n","import React, { useContext, useState, useEffect } from 'react'\nimport { Tenancy } from '../types/global'\nimport { deleteTenancyFromStorage } from '../lib/backend'\nimport { TenancyContext, DELETE_TENANCY } from '../contexts/TenancyContext'\nimport Pagination from 'react-bootstrap/Pagination'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport { XLg } from 'react-bootstrap-icons'\n\nconst TenancyList = () => {\n  const items_per_page = parseInt(process.env.REACT_APP_NUMBER_OF_ITEMS_IN_TENANCY_LIST || '10')\n  const { tenancies, dispatch } = useContext(TenancyContext)\n  const [items, setItems] = useState<Tenancy[]>()\n  const [page_count, setPageCount] = useState(1)\n  const [current_page_index, setCurrentPageIndex] = useState(1)\n\n  const handleClick = (index: number) => {\n    setCurrentPageIndex(index)\n  }\n\n  useEffect(() => {\n    if (current_page_index > 1 && current_page_index > page_count) {\n      setCurrentPageIndex(current_page_index - 1)\n    }\n  }, [current_page_index, page_count])\n\n  useEffect(() => {\n    const start = (current_page_index - 1) * items_per_page\n    const end = current_page_index * items_per_page\n    setItems(tenancies.slice(start, end))\n  }, [current_page_index, tenancies, items_per_page])\n\n  useEffect(() => {\n    const count = Math.ceil(tenancies.length / items_per_page)\n    if (count > 0) {\n      setPageCount(count)\n    }\n  }, [tenancies, items_per_page])\n\n  /**\n   * @todo make it purdier than window.confirm\n   */\n  const handleDeleteClick = (id: string) => {\n    if (window.confirm('Are you sure?')) {\n      deleteTenancyFromStorage(id)\n        .then(() => {\n          dispatch({\n            type: DELETE_TENANCY,\n            payload: id,\n          })\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }\n  }\n\n  const getItems = () => {\n    const items = []\n    for (let number = 1; number <= page_count; number++) {\n      items.push(\n        <Pagination.Item\n          key={number}\n          active={number === current_page_index}\n          onClick={() => {\n            handleClick(number)\n          }}\n        >\n          {number}\n        </Pagination.Item>,\n      )\n    }\n    return items\n  }\n\n  return (\n    <div className=\"TenancyList\">\n      {items && items.length > 0 && (\n        <>\n          {items.map((tenancy) => (\n            <Row className=\"mt-1 align-items-center\" key={tenancy.tekst}>\n              <Col>{tenancy.tekst}</Col>\n              <Col md=\"auto\">\n                <Button\n                  variant=\"danger\"\n                  onClick={() => {\n                    handleDeleteClick(tenancy.adgangsadresse.id)\n                  }}\n                >\n                  <XLg />\n                </Button>\n              </Col>\n            </Row>\n          ))}\n          {page_count > 1 && (\n            <>\n              <br />\n              <Pagination>{getItems()}</Pagination>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  )\n}\nexport default TenancyList\n","import React, { useState, useEffect, lazy, Suspense, useRef, useContext } from 'react'\nimport styled from '@emotion/styled'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Spinner from 'react-bootstrap/Spinner'\nimport { PlusLg } from 'react-bootstrap-icons'\nimport { getTenanciesFromStorage } from '../lib/backend'\nimport { TenancyContext, SET_TENANCIES } from '../contexts/TenancyContext'\nimport TenancyList from './TenancyList'\n\nconst AddTenancy = lazy(() => import('./AddTenancy'))\n\nconst FabButton = styled(Button)`\n  width: 50px;\n  height: 50px;\n  border-radius: 50px;\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n`\n\nconst OverView = () => {\n  const { tenancies, dispatch } = useContext(TenancyContext)\n  const [loading, setLoading] = useState(true)\n  const [show_add_modal, setShowAddModal] = useState(false)\n  const is_mounted = useRef(false)\n\n  useEffect(() => {\n    is_mounted.current = true\n    getTenanciesFromStorage()\n      .then((data) => {\n        if (is_mounted.current) {\n          dispatch({\n            type: SET_TENANCIES,\n            payload: data,\n          })\n          setLoading(false)\n        }\n      })\n      .catch((err) => {\n        setLoading(false)\n        console.log(err)\n      })\n\n    return () => {\n      is_mounted.current = false\n    }\n  }, [dispatch])\n\n  const handleCloseAddModal = () => {\n    setShowAddModal(false)\n  }\n\n  const handleAddClick = () => {\n    setShowAddModal(true)\n  }\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>My Tenancies</Navbar.Brand>\n      </Navbar>\n      <Container fluid=\"md\">\n        {loading && (\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        )}\n        {!loading && tenancies && tenancies.length === 0 && (\n          <Row>\n            <Col>You have no tenancies, go ahead and add one!</Col>\n          </Row>\n        )}\n        {!loading && tenancies && tenancies.length > 0 && <TenancyList />}\n      </Container>\n      <FabButton onClick={handleAddClick}>\n        <PlusLg />\n      </FabButton>\n      <Suspense fallback=\"loading...\">{show_add_modal && <AddTenancy hideModal={handleCloseAddModal} />}</Suspense>\n    </>\n  )\n}\nexport default OverView\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport OverView from './components/OverView'\nimport TenancyProvider from './contexts/TenancyContext'\n\nfunction App() {\n  return (\n    <TenancyProvider>\n      <Container>\n        <Row>\n          <Col>\n            <OverView />\n          </Col>\n        </Row>\n      </Container>\n    </TenancyProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}