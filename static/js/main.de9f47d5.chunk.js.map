{"version":3,"sources":["i18n/config.ts","components/LanguageToggler.tsx","components/portfolio/Search.tsx","components/portfolio/Portfolio.tsx","App.tsx","reportWebVitals.ts","index.tsx","contexts/TenancyContext.tsx","firebase/firebase.config.ts","lib/backend.ts"],"names":["supported_i18n_languages","initial_language","localStorage","getItem","indexOf","i18n","use","initReactI18next","init","fallbackLng","lng","resources","en","translations","require","sv","ns","defaultNS","languages","LanguageToggler","useTranslation","changeLanguage","e","value","target","setItem","className","map","lang","Button","variant","language","onClick","Pelle","styled","div","Search","tenancies","t","navigate","useNavigate","useState","selected","id","labelKey","minLength","onChange","pick","options","placeholder","renderMenuItemChildren","option","tekst","AddTenancy","lazy","TenancyItem","TenancyList","FabButton","Portfolio","useContext","TenancyContext","dispatch","loading","setLoading","show_add_modal","setShowAddModal","is_mounted","useRef","useEffect","current","getTenanciesFromStorage","then","data","type","SET_TENANCIES","payload","catch","err","console","log","Navbar","bg","expand","Brand","Spinner","animation","role","length","Container","Row","Col","fallback","path","element","hideModal","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","ADD_TENANCY","UPDATE_TENANCY","DELETE_TENANCY","initialState","reducer","state","action","tenancy","filter","obj","createContext","TenancyProvider","children","useReducer","Provider","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","db","analytics","getAddressInfoFromDAWA","query","success","fail","axios","get","process","escape","response","status","updateTenancyInStorage","a","new_obj","updated","FieldValue","serverTimestamp","collection","doc","update","deleteTenancyFromStorage","delete","result","docs","forEach","item","push","addTenancyToStorage","created","location","GeoPoint","x","y","set"],"mappings":"qxFAGaA,EAA2B,CAAC,KAAM,MAE3CC,EAAmBC,aAAaC,QAAQ,aAAe,MAEC,IAAxDH,EAAyBI,QAAQH,KACnCA,EAAmB,MAGrBI,IAAKC,IAAIC,KAAkBC,KAAK,CAC9BC,YAAa,KACbC,IAAKT,EACLU,UAAW,CACTC,GAAI,CACFC,aAAcC,EAAQ,MAExBC,GAAI,CACFF,aAAcC,EAAQ,OAG1BE,GAAI,CAAC,gBACLC,UAAW,iBAGbZ,IAAKa,UAAY,CAAC,KAAM,MAETb,EAAf,EAAeA,I,WCHAc,EApBS,WAAO,IACrBd,EAASe,cAATf,KAEFgB,EAAiB,SAACC,GACtB,IAAMC,EAASD,EAAEE,OAA4BD,MAC7CrB,aAAauB,QAAQ,WAAYF,GAEjClB,EAAKgB,eAAeE,IAGtB,OACE,qBAAKG,UAAU,kBAAf,SACG1B,EAAyB2B,KAAI,SAACC,GAAD,OAC5B,cAACC,EAAA,EAAD,CAAQC,QAASF,IAASvB,EAAK0B,SAAW,OAAS,QAAoBC,QAASX,EAAgBE,MAAOK,EAAvG,SACGA,GAD8DA,S,QCLnEK,G,OAAQC,IAAOC,IAAV,oFAsCIC,EA5BA,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UACRC,EAAMlB,cAANkB,EACFC,EAAWC,cAF4B,EAKbC,mBAAoB,IALP,mBAKtCC,EALsC,UAa7C,OACE,cAACT,EAAD,UACE,cAAC,IAAD,CACEU,GAAG,uBACHC,SAAS,QACTC,UAAW,EACXH,SAAUA,EACVI,SAboB,SAACC,GACrBA,EAAK,IACPR,EAAS,YAAD,OAAaQ,EAAK,GAAGJ,MAY3BK,QAASX,EACTY,YAAaX,EAAE,sCACfY,uBAAwB,SAACC,GAAD,OAAqB,+BAAOA,EAAOC,cC5B7DC,EAAaC,gBAAK,kBAAM,uDACxBC,EAAcD,gBAAK,kBAAM,uDACzBE,EAAcF,gBAAK,kBAAM,iCAEzBG,EAAYvB,YAAOL,IAAPK,CAAH,0IAiFAwB,EAxEG,WAAO,IACfpB,EAAMlB,cAANkB,EADc,EAEUqB,qBAAWC,KAAnCvB,EAFc,EAEdA,UAAWwB,EAFG,EAEHA,SAFG,EAGQpB,oBAAS,GAHjB,mBAGfqB,EAHe,KAGNC,EAHM,OAIoBtB,oBAAS,GAJ7B,mBAIfuB,EAJe,KAICC,EAJD,KAMhBC,EAAaC,kBAAO,GAE1BC,qBAAU,WAiBR,OAhBAF,EAAWG,SAAU,EACrBC,cACGC,MAAK,SAACC,GACDN,EAAWG,UACbR,EAAS,CACPY,KAAMC,IACNC,QAASH,IAEXT,GAAW,OAGda,OAAM,SAACC,GACNd,GAAW,GACXe,QAAQC,IAAIF,MAGT,WACLX,EAAWG,SAAU,KAEtB,CAACR,IAUJ,OACE,qCACE,eAACmB,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,UACE,cAACF,EAAA,EAAOG,MAAR,CAAczD,UAAU,UAAxB,SAAmCY,EAAE,2BACrC,cAAC,EAAD,IACA,cAAC,EAAD,CAAQD,UAAWA,OAEpByB,GACC,cAACsB,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAAjC,SACE,sBAAM5D,UAAU,UAAhB,2BAGFoC,GAAWzB,GAAkC,IAArBA,EAAUkD,QAClC,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAAMpD,EAAE,yCAIZwB,GAAWzB,GAAaA,EAAUkD,OAAS,GAC3C,cAAC,WAAD,CAAUI,SAAS,GAAnB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,cAAcC,QAAS,cAACtC,EAAD,MACnC,cAAC,IAAD,CAAOqC,KAAK,IAAIC,QAAS,cAACrC,EAAD,CAAanB,UAAWA,WAIvD,cAACoB,EAAD,CAAWzB,QA/BQ,WACrBiC,GAAgB,IA8Bd,SACE,cAAC,IAAD,MAEF,cAAC,WAAD,CAAU0B,SAAS,aAAnB,SAAiC3B,GAAkB,cAACX,EAAD,CAAYyC,UAtCvC,WAC1B7B,GAAgB,YCnCL8B,MAnBf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAACP,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,UAEE,cAAC,IAAD,CAAOE,KAAK,IAAIC,QAAS,cAAC,EAAD,mBCH1BG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,SAM1BX,K,oPCfatB,EAAgB,gBAChBkC,EAAc,cACdC,EAAiB,iBACjBC,EAAiB,iBAYxBC,EAAsB,CAC1B1E,UAAW,IAGP2E,EAAU,SAACC,EAAcC,GAC7B,OAAQA,EAAOzC,MACb,KAAKC,EACH,OAAO,2BAAKuC,GAAZ,IAAmB5E,UAAW6E,EAAOvC,UACvC,KAAKiC,EACH,OAAO,2BAAKK,GAAZ,IAAmB5E,UAAU,GAAD,mBAAM4E,EAAM5E,WAAZ,CAAuB6E,EAAOvC,YAC5D,KAAKkC,EACH,OAAO,2BACFI,GADL,IAEE5E,UAAW4E,EAAM5E,UAAUV,KAAI,SAACwF,GAC9B,OAAIA,EAAQxE,KAAOuE,EAAOvC,QAAQhC,GACzBuE,EAAOvC,QAEPwC,OAIf,KAAKL,EACH,OAAO,2BAAKG,GAAZ,IAAmB5E,UAAW4E,EAAM5E,UAAU+E,QAAO,SAACC,GAAD,OAASA,EAAI1E,KAAOuE,EAAOvC,aAClF,QACE,OAAOsC,IAQArD,EAAiB0D,wBAAa,2BACtCP,GADsC,IAEzClD,SAAU,kBAAM,SAQH0D,IALmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACxBC,qBAAWT,EAASD,GADI,mBAC3CE,EAD2C,KACpCpD,EADoC,KAGlD,OAAO,cAACD,EAAe8D,SAAhB,CAAyBnG,MAAK,2BAAO0F,GAAP,IAAcpD,aAA5C,SAAyD2D,M,sRC3ClEG,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,4BACZC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKV,IAAMC,EAAYT,IAASS,UAE5BC,EAAKD,IACXT,IAASW,YAEMD,QCZFE,EAAyB,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,KAEvDC,IACGC,IAFgBC,iEAECC,OAAON,IACxBjE,MAAK,SAACwE,GACmB,MAApBA,EAASC,QACXP,EAAQM,EAASvE,SAGpBI,OAAM,SAACC,GACN6D,EAAK7D,OAIEoE,EAAsB,uCAAG,WAAOtG,EAAY0E,GAAnB,eAAA6B,EAAA,6DAC9BC,EAD8B,2BAE/B9B,GAF+B,IAGlC+B,QAAShB,EAAUiB,WAAWC,oBAHI,SAK9BjB,EAAGkB,WAAW,aAAaC,IAAI7G,GAAI8G,OAAON,GALZ,gCAM7BA,GAN6B,2CAAH,wDAStBO,EAAwB,uCAAG,WAAO/G,GAAP,SAAAuG,EAAA,sEAChCb,EAAGkB,WAAW,aAAaC,IAAI7G,GAAIgH,SADH,2CAAH,sDAIxBrF,EAAuB,uCAAG,8BAAA4E,EAAA,6DAC/BU,EAAoB,GACpBb,EAAWV,EAAGkB,WAAW,aAFM,SAGlBR,EAASH,MAHS,qBAIhCiB,KAAKC,SAAQ,SAACC,GACjBH,EAAOI,KAAKD,EAAKvF,WALkB,kBAO9BoF,GAP8B,2CAAH,qDAUvBK,EAAmB,uCAAG,WAAO5C,GAAP,eAAA6B,EAAA,6DAC3BC,EAD2B,2BAE5B9B,GAF4B,IAG/B6C,QAAS9B,EAAUiB,WAAWC,kBAC9BF,QAAShB,EAAUiB,WAAWC,kBAC9Ba,SAAU,IAAI/B,EAAUgC,SAAS/C,EAAIgD,EAAGhD,EAAIiD,KALb,SAO3BjC,EAAGkB,WAAW,aAAaC,IAAInC,EAAI1E,IAAI4H,IAAIpB,GAPhB,gCAQ1BA,GAR0B,2CAAH,wD","file":"static/js/main.de9f47d5.chunk.js","sourcesContent":["import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\n\nexport const supported_i18n_languages = ['en', 'sv']\n\nlet initial_language = localStorage.getItem('language') || 'en'\n\nif (supported_i18n_languages.indexOf(initial_language) === -1) {\n  initial_language = 'en'\n}\n\ni18n.use(initReactI18next).init({\n  fallbackLng: 'en',\n  lng: initial_language,\n  resources: {\n    en: {\n      translations: require('./locales/en/translations.json'),\n    },\n    sv: {\n      translations: require('./locales/sv/translations.json'),\n    },\n  },\n  ns: ['translations'],\n  defaultNS: 'translations',\n})\n\ni18n.languages = ['en', 'sv']\n\nexport default i18n\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Button from 'react-bootstrap/Button'\nimport { supported_i18n_languages } from '../i18n/config'\n\nconst LanguageToggler = () => {\n  const { i18n } = useTranslation()\n\n  const changeLanguage = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const value = (e.target as HTMLInputElement).value\n    localStorage.setItem('language', value)\n    // console.log(i18n.languages) changes between clicks, no idea why...\n    i18n.changeLanguage(value)\n  }\n\n  return (\n    <div className=\"LanguageToggler\">\n      {supported_i18n_languages.map((lang) => (\n        <Button variant={lang === i18n.language ? 'dark' : 'light'} key={lang} onClick={changeLanguage} value={lang}>\n          {lang}\n        </Button>\n      ))}\n    </div>\n  )\n}\nexport default LanguageToggler\n","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Typeahead } from 'react-bootstrap-typeahead'\nimport { Tenancy } from '../../types/global'\nimport { useNavigate } from 'react-router-dom'\nimport 'react-bootstrap-typeahead/css/Typeahead.css'\nimport styled from '@emotion/styled'\n\n/**\n * @todo react-highlight-words ?\n * in the typeahead examples this happens automatically...\n */\n\nconst Pelle = styled.div`\n  #async-tenancy-search {\n    min-width: 20rem;\n  }\n`\n\ntype SearchProps = {\n  tenancies: Tenancy[]\n}\n\nconst Search = ({ tenancies }: SearchProps) => {\n  const { t } = useTranslation()\n  const navigate = useNavigate()\n\n  // eslint-disable-next-line\n  const [selected, setSelected] = useState<Tenancy[]>([]) // setSelected never used..\n\n  const handleTenancyPick = (pick: Tenancy[]) => {\n    if (pick[0]) {\n      navigate(`/tenancy/${pick[0].id}`)\n    }\n  }\n\n  return (\n    <Pelle>\n      <Typeahead\n        id=\"async-tenancy-search\"\n        labelKey=\"tekst\"\n        minLength={1}\n        selected={selected}\n        onChange={handleTenancyPick}\n        options={tenancies}\n        placeholder={t('overview_navbar_placeholder_search')}\n        renderMenuItemChildren={(option: Tenancy) => <span>{option.tekst}</span>}\n      />\n    </Pelle>\n  )\n}\nexport default Search\n","import React, { useState, useEffect, lazy, Suspense, useRef, useContext } from 'react'\nimport styled from '@emotion/styled'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Button from 'react-bootstrap/Button'\nimport { PlusLg } from 'react-bootstrap-icons'\n\nimport { useTranslation } from 'react-i18next'\nimport { getTenanciesFromStorage } from '../../lib/backend'\nimport { TenancyContext, SET_TENANCIES } from '../../contexts/TenancyContext'\nimport { Routes, Route } from 'react-router-dom'\nimport LanguageToggler from '../LanguageToggler'\nimport Search from './Search'\n\nconst AddTenancy = lazy(() => import('./AddTenancy'))\nconst TenancyItem = lazy(() => import('./TenancyItem'))\nconst TenancyList = lazy(() => import('./TenancyList'))\n\nconst FabButton = styled(Button)`\n  width: 50px;\n  height: 50px;\n  border-radius: 50px;\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n`\n\nconst Portfolio = () => {\n  const { t } = useTranslation()\n  const { tenancies, dispatch } = useContext(TenancyContext)\n  const [loading, setLoading] = useState(true)\n  const [show_add_modal, setShowAddModal] = useState(false)\n\n  const is_mounted = useRef(false)\n\n  useEffect(() => {\n    is_mounted.current = true\n    getTenanciesFromStorage()\n      .then((data) => {\n        if (is_mounted.current) {\n          dispatch({\n            type: SET_TENANCIES,\n            payload: data,\n          })\n          setLoading(false)\n        }\n      })\n      .catch((err) => {\n        setLoading(false)\n        console.log(err)\n      })\n\n    return () => {\n      is_mounted.current = false\n    }\n  }, [dispatch])\n\n  const handleCloseAddModal = () => {\n    setShowAddModal(false)\n  }\n\n  const handleAddClick = () => {\n    setShowAddModal(true)\n  }\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand className=\"mr-auto\">{t('overview_navbar_brand')}</Navbar.Brand>\n        <LanguageToggler />\n        <Search tenancies={tenancies} />\n      </Navbar>\n      {loading && (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      )}\n      {!loading && tenancies && tenancies.length === 0 && (\n        <Container>\n          <Row>\n            <Col>{t('overview_you_have_no_tenancies')}</Col>\n          </Row>\n        </Container>\n      )}\n      {!loading && tenancies && tenancies.length > 0 && (\n        <Suspense fallback=\"\">\n          <Routes>\n            <Route path=\"tenancy/:id\" element={<TenancyItem />} />\n            <Route path=\"*\" element={<TenancyList tenancies={tenancies} />} />\n          </Routes>\n        </Suspense>\n      )}\n      <FabButton onClick={handleAddClick}>\n        <PlusLg />\n      </FabButton>\n      <Suspense fallback=\"loading...\">{show_add_modal && <AddTenancy hideModal={handleCloseAddModal} />}</Suspense>\n    </>\n  )\n}\nexport default Portfolio\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport TenancyProvider from './contexts/TenancyContext'\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom'\nimport Portfolio from './components/portfolio/Portfolio'\n\nfunction App() {\n  return (\n    <Router>\n      <TenancyProvider>\n        <Container>\n          <Row>\n            <Col>\n              <Routes>\n                {/* <Route path=\"/tenancies/:id\" element={<Tenancy />} /> */}\n                <Route path=\"*\" element={<Portfolio />} />\n              </Routes>\n            </Col>\n          </Row>\n        </Container>\n      </TenancyProvider>\n    </Router>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport './i18n/config'\n\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import React, { createContext, useReducer } from 'react'\nimport { Tenancy } from '../types/global'\n\nexport const SET_TENANCIES = 'SET_TENANCIES'\nexport const ADD_TENANCY = 'ADD_TENANCY'\nexport const UPDATE_TENANCY = 'UPDATE_TENANCY'\nexport const DELETE_TENANCY = 'DELETE_TENANCY'\n\ntype State = {\n  tenancies: Tenancy[]\n}\n\ntype Action =\n  | { type: 'SET_TENANCIES'; payload: Tenancy[] }\n  | { type: 'ADD_TENANCY'; payload: Tenancy }\n  | { type: 'UPDATE_TENANCY'; payload: Tenancy }\n  | { type: 'DELETE_TENANCY'; payload: string }\n\nconst initialState: State = {\n  tenancies: [],\n}\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case SET_TENANCIES:\n      return { ...state, tenancies: action.payload }\n    case ADD_TENANCY:\n      return { ...state, tenancies: [...state.tenancies, action.payload] }\n    case UPDATE_TENANCY:\n      return {\n        ...state,\n        tenancies: state.tenancies.map((tenancy) => {\n          if (tenancy.id === action.payload.id) {\n            return action.payload\n          } else {\n            return tenancy\n          }\n        }),\n      }\n    case DELETE_TENANCY:\n      return { ...state, tenancies: state.tenancies.filter((obj) => obj.id !== action.payload) }\n    default:\n      return state\n  }\n}\n\nexport type ContextType = State & {\n  dispatch: React.Dispatch<Action>\n}\n\nexport const TenancyContext = createContext<ContextType>({\n  ...initialState,\n  dispatch: () => null,\n})\n\nconst TenancyProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  return <TenancyContext.Provider value={{ ...state, dispatch }}>{children}</TenancyContext.Provider>\n}\nexport default TenancyProvider\n","// import firebase from 'firebase'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/analytics'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDS1Th9ZSpB5S1eiPe4FT046Wc1PljDhYo',\n  authDomain: 'tenancies.firebaseapp.com',\n  projectId: 'tenancies',\n  storageBucket: 'tenancies.appspot.com',\n  messagingSenderId: '447792445823',\n  appId: '1:447792445823:web:2fa88d20bee035c3cc024a',\n  measurementId: 'G-L2EL2TGPQD',\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport const firestore = firebase.firestore\n\nconst db = firestore()\nfirebase.analytics()\n\nexport default db\n","import axios from 'axios'\nimport { Tenancy, DAWATenancy, TenancyMetaData } from '../types/global'\nimport db, { firestore } from '../firebase/firebase.config'\n\ntype AddressParams = {\n  query: string\n  success: (data: DAWATenancy[]) => void\n  fail: (err: Error) => void\n}\n\nexport const getAddressInfoFromDAWA = ({ query, success, fail }: AddressParams): void => {\n  const remote_url = process.env.REACT_APP_DAWA_URL\n  axios\n    .get(remote_url + escape(query))\n    .then((response) => {\n      if (response.status === 200) {\n        success(response.data)\n      }\n    })\n    .catch((err) => {\n      fail(err)\n    })\n}\n\nexport const updateTenancyInStorage = async (id: string, obj: TenancyMetaData) => {\n  const new_obj = {\n    ...obj,\n    updated: firestore.FieldValue.serverTimestamp(),\n  }\n  await db.collection('tenancies').doc(id).update(new_obj)\n  return new_obj\n}\n\nexport const deleteTenancyFromStorage = async (id: string) => {\n  await db.collection('tenancies').doc(id).delete()\n}\n\nexport const getTenanciesFromStorage = async () => {\n  const result: Tenancy[] = []\n  const response = db.collection('tenancies')\n  const data = await response.get()\n  data.docs.forEach((item) => {\n    result.push(item.data() as Tenancy)\n  })\n  return result\n}\n\nexport const addTenancyToStorage = async (obj: Tenancy) => {\n  const new_obj = {\n    ...obj,\n    created: firestore.FieldValue.serverTimestamp(),\n    updated: firestore.FieldValue.serverTimestamp(),\n    location: new firestore.GeoPoint(obj.x, obj.y),\n  }\n  await db.collection('tenancies').doc(obj.id).set(new_obj)\n  return new_obj\n}\n"],"sourceRoot":""}