{"version":3,"sources":["components/portfolio/EditTenancy.tsx","components/portfolio/TenancyItem.tsx"],"names":["EditTenancy","tenancy","t","useTranslation","is_mounted","useRef","useEffect","current","dispatch","useContext","TenancyContext","useState","is_saving","setIsSaving","Form","onSubmit","e","preventDefault","stopPropagation","metadata","elements","target","querySelectorAll","found","i","length","element","val","value","trim","name","updated_tenancy","updateTenancyInStorage","then","data","type","UPDATE_TENANCY","payload","catch","err","console","log","Group","controlId","Label","Control","defaultValue","size","step","placeholder","nbr_of_rooms","utilities","as","rows","tenant_information","Button","variant","Spinner","animation","role","className","MyCrumb","styled","Breadcrumb","TheItem","item","url","adgangsadresse","y","x","process","navigate","useNavigate","Container","Row","Col","tekst","lg","Image","crossOrigin","width","height","src","rounded","onClick","window","confirm","deleteTenancyFromStorage","id","DELETE_TENANCY","TenancyItem","useParams","tenancies","setItem","error","setError","filter","obj","Item","linkAs","Link","linkProps","to","active"],"mappings":"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","file":"static/js/5.21d00923.chunk.js","sourcesContent":["import React, { useState, useContext, useRef, useEffect } from 'react'\n// import Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Form from 'react-bootstrap/Form'\nimport { updateTenancyInStorage } from '../../lib/backend'\nimport { Tenancy } from '../../types/global'\nimport { UPDATE_TENANCY, TenancyContext } from '../../contexts/TenancyContext'\n\nimport { useTranslation } from 'react-i18next'\n\ntype tplotOptions = {\n  [key: string]: string | number\n}\n\ntype EditTenancyProps = {\n  tenancy: Tenancy\n}\n\nconst EditTenancy = ({ tenancy }: EditTenancyProps) => {\n  const { t } = useTranslation()\n  const is_mounted = useRef(false)\n\n  useEffect(() => {\n    is_mounted.current = true\n    return () => {\n      is_mounted.current = false\n    }\n  }, [])\n\n  const { dispatch } = useContext(TenancyContext)\n\n  // const [is_loading, setIsLoading] = useState(false)\n  const [is_saving, setIsSaving] = useState(false)\n\n  // const [picked_tenancy, setPickedTenancy] = useState<Tenancy>()\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    const metadata: tplotOptions = {}\n    const elements = (e.target as HTMLFormElement).querySelectorAll('input, textarea')\n\n    let found = false\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i] as HTMLInputElement\n      const val = element.value.trim()\n      if (val.length) {\n        metadata[element.name] = val\n        found = true\n      }\n    }\n\n    const updated_tenancy: Tenancy = { ...tenancy, metadata }\n    if (!found) {\n      delete updated_tenancy.metadata\n    }\n    setIsSaving(true)\n\n    updateTenancyInStorage(updated_tenancy)\n      .then((data) => {\n        dispatch({\n          type: UPDATE_TENANCY,\n          payload: data,\n        })\n        if (is_mounted.current) {\n          setIsSaving(false)\n          // hideModal()\n        }\n      })\n      .catch((err) => {\n        if (is_mounted.current) {\n          setIsSaving(false)\n        }\n        console.log(err)\n      })\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group controlId=\"formBasicSize\">\n        <Form.Label>{t('edit_tenancy_label_size')}</Form.Label>\n        <Form.Control\n          defaultValue={tenancy.metadata && tenancy.metadata.size}\n          name=\"size\"\n          type=\"number\"\n          step=\"0.1\"\n          placeholder={t('edit_tenancy_label_size_placeholder')}\n        />\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicNbrOfRooms\">\n        <Form.Label>{t('edit_tenancy_label_nbr_of_rooms')}</Form.Label>\n        <Form.Control\n          defaultValue={tenancy.metadata && tenancy.metadata.nbr_of_rooms}\n          name=\"nbr_of_rooms\"\n          type=\"number\"\n          step=\"1\"\n          placeholder={t('edit_tenancy_label_nbr_of_rooms_placeholder')}\n        />\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicUtilities\">\n        <Form.Label>{t('edit_tenancy_label_utilities')}</Form.Label>\n        <Form.Control\n          name=\"utilities\"\n          defaultValue={tenancy.metadata && tenancy.metadata.utilities}\n          as=\"textarea\"\n          rows={3}\n          placeholder={t('edit_tenancy_label_utilities_placeholder')}\n        />\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicTenantInformation\">\n        <Form.Label>{t('edit_tenancy_label_tenant_information')}</Form.Label>\n        <Form.Control\n          defaultValue={tenancy.metadata && tenancy.metadata.tenant_information}\n          name=\"tenant_information\"\n          as=\"textarea\"\n          rows={3}\n          placeholder={t('edit_tenancy_label_tenant_information_placeholder')}\n        />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n        {is_saving && (\n          <>\n            <Spinner animation=\"border\" role=\"status\" size=\"sm\">\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner>{' '}\n            {t('edit_tenancy_save_button_is_saving')}\n          </>\n        )}\n        {!is_saving && t('edit_tenancy_save_button')}\n      </Button>\n    </Form>\n  )\n}\nexport default EditTenancy\n","import React, { useContext, useEffect, useState } from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport { TenancyContext, DELETE_TENANCY } from '../../contexts/TenancyContext'\nimport { Tenancy } from '../../types/global'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Breadcrumb from 'react-bootstrap/Breadcrumb'\nimport { XLg } from 'react-bootstrap-icons'\nimport { useTranslation } from 'react-i18next'\n\nimport Image from 'react-bootstrap/Image'\n\nimport EditTenancy from './EditTenancy'\nimport styled from '@emotion/styled'\nimport { deleteTenancyFromStorage } from '../../lib/backend'\n\nconst MyCrumb = styled(Breadcrumb)`\n  ol {\n    background-color: transparent;\n  }\n`\ntype TheItemProps = {\n  item: Tenancy\n}\n\nconst TheItem = ({ item }: TheItemProps) => {\n  const url = `https://maps.googleapis.com/maps/api/streetview?size=400x400&location=${item.adgangsadresse.y},${item.adgangsadresse.x}&fov=70&pitch=0&key=${process.env.REACT_APP_GOOGLE_API_KEY}`\n  // const url = `https://via.placeholder.com/500`\n  const { dispatch } = useContext(TenancyContext)\n  const navigate = useNavigate()\n\n  /**\n   * @todo make it purdier than window.confirm\n   */\n  const handleDeleteClick = () => {\n    if (window.confirm('Are you sure?')) {\n      deleteTenancyFromStorage(item.adgangsadresse.id)\n        .then(() => {\n          dispatch({\n            type: DELETE_TENANCY,\n            payload: item.adgangsadresse.id,\n          })\n          navigate('tenancies')\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>{item.tekst}</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col lg>\n          <Image crossOrigin=\"anonymous\" width=\"500\" height=\"500\" src={url} rounded />\n        </Col>\n        <Col lg>\n          <EditTenancy tenancy={item} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <br />\n          <Button variant=\"danger\" onClick={handleDeleteClick}>\n            <XLg /> Delete Tenancy\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst TenancyItem = () => {\n  const { id } = useParams()\n  const { t } = useTranslation()\n  const { tenancies } = useContext(TenancyContext)\n\n  const [item, setItem] = useState<Tenancy | null>(null)\n  const [error, setError] = useState('')\n\n  useEffect(() => {\n    const item = tenancies.filter((obj) => obj.adgangsadresse.id === id)[0]\n    if (item) {\n      setItem(item)\n    } else {\n      setError('Item not found :(')\n    }\n  }, [tenancies, id])\n\n  return (\n    <>\n      <MyCrumb>\n        <Breadcrumb.Item linkAs={Link} linkProps={{ to: '/' }}>\n          {t('tenancy_item_breadcrumb_back_to_list')}\n        </Breadcrumb.Item>\n        <Breadcrumb.Item active>\n          {error && 'ERROR'}\n          {item && item.tekst}\n        </Breadcrumb.Item>\n      </MyCrumb>\n      {error && (\n        <Container>\n          <Row>\n            <Col>{error}</Col>\n          </Row>\n        </Container>\n      )}\n      {item && <TheItem item={item} />}\n    </>\n  )\n}\nexport default TenancyItem\n"],"sourceRoot":""}